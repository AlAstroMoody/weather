import { getApiKey } from "./crypto";

const API_KEY = getApiKey();

if (!API_KEY) {
  console.warn("‚ö†Ô∏è API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π!");
}
const BASE_URL = "https://api.weatherapi.com/v1";

function handleApiError(status: number): never {
  if (status === 400) {
    throw new Error(
      `–û—à–∏–±–∫–∞ API: –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.`
    );
  } else if (status === 401) {
    throw new Error(`–û—à–∏–±–∫–∞ API: –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env`);
  } else if (status === 403) {
    throw new Error(`–û—à–∏–±–∫–∞ API: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
  } else {
    throw new Error(`–û—à–∏–±–∫–∞ API: HTTP ${status}`);
  }
}

export interface WeatherData {
  location: {
    name: string;
    region: string;
    country: string;
    lat: number;
    lon: number;
    localtime: string;
    tz_id: string;
  };
  current: {
    temp_c: number;
    feelslike_c: number;
    condition: {
      text: string;
      icon: string;
      code: number;
    };
    humidity: number;
    wind_kph: number;
    wind_degree: number;
    wind_dir: string;
    pressure_mb: number;
    uv: number;
    is_day: number;
    vis_km: number;
    gust_kph: number;
    precip_mm: number;
    cloud: number;
  };
  forecast?: {
    forecastday: Array<{
      date: string;
      day: {
        maxtemp_c: number;
        mintemp_c: number;
        avgtemp_c: number;
        maxwind_kph: number;
        totalprecip_mm: number;
        avghumidity: number;
        daily_will_it_rain: number;
        daily_chance_of_rain: number;
        condition: {
          text: string;
          icon: string;
          code: number;
        };
        uv: number;
      };
      astro: {
        sunrise: string;
        sunset: string;
        moonrise: string;
        moonset: string;
        moon_phase: string;
        moon_illumination: number;
        is_moon_up: number;
        is_sun_up: number;
      };
      hour: Array<{
        time: string;
        temp_c: number;
        condition: {
          text: string;
          icon: string;
          code: number;
        };
        wind_kph: number;
        wind_degree: number;
        wind_dir: string;
        pressure_mb: number;
        humidity: number;
        will_it_rain: number;
        chance_of_rain: number;
        vis_km: number;
        uv: number;
        is_day: number;
      }>;
    }>;
  };
}

export interface ProcessedWeatherData {
  city: string;
  temperature: number;
  feelsLike: number;
  condition: string;
  humidity: number;
  windSpeed: number;
  windDegree: number;
  windDir: string;
  pressure: number;
  icon: string;
  uv: number;
  isDay: boolean;
  visibility: number;
  gustSpeed: number;
  precipitation: number;
  cloudCover: number;
  lat?: number;
  lon?: number;
}

export interface ProcessedForecastData {
  day: string;
  date: string;
  temp: number;
  icon: string;
  condition: string;
  maxTemp: number;
  minTemp: number;
  maxWind: number;
  totalPrecip: number;
  avgHumidity: number;
  willItRain: boolean;
  chanceOfRain: number;
  uv: number;
  astro: {
    sunrise: string;
    sunset: string;
    moonrise: string;
    moonset: string;
    moonPhase: string;
    moonIllumination: number;
  };
  hourly: Array<{
    time: string;
    temp: number;
    condition: string;
    icon: string;
    windSpeed: number;
    windDir: string;
    humidity: number;
    willItRain: boolean;
    chanceOfRain: number;
    visibility: number;
    uv: number;
    isDay: boolean;
  }>;
}

// –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é

const translateWeatherCondition = (text: string): string => {
  const translations: Record<string, string> = {
    // –Ø—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞
    Clear: "–Ø—Å–Ω–æ",
    Sunny: "–°–æ–ª–Ω–µ—á–Ω–æ",
    "Partly cloudy": "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å",
    "Partly Cloudy": "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å",
    Cloudy: "–û–±–ª–∞—á–Ω–æ",
    Overcast: "–ü–∞—Å–º—É—Ä–Ω–æ",

    // –î–æ–∂–¥—å
    "Patchy rain possible": "–í–æ–∑–º–æ–∂–µ–Ω –Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å",
    "Patchy light drizzle": "–ú–µ—Å—Ç–∞–º–∏ –ª–µ–≥–∫–∞—è –º–æ—Ä–æ—Å—å",
    "Light drizzle": "–õ–µ–≥–∫–∞—è –º–æ—Ä–æ—Å—å",
    "Patchy rain nearby": "–ú–µ—Å—Ç–∞–º–∏ –¥–æ–∂–¥—å –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏",
    "Light rain": "–õ–µ–≥–∫–∏–π –¥–æ–∂–¥—å",
    "Moderate rain at times": "–í—Ä–µ–º–µ–Ω–∞–º–∏ —É–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å",
    "Moderate rain": "–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å",
    "Heavy rain at times": "–í—Ä–µ–º–µ–Ω–∞–º–∏ —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å",
    "Heavy rain": "–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å",
    "Light rain shower": "–õ–µ–≥–∫–∏–π –ª–∏–≤–µ–Ω—å",
    "Moderate or heavy rain shower": "–£–º–µ—Ä–µ–Ω–Ω—ã–π –∏–ª–∏ —Å–∏–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å",
    "Torrential rain shower": "–ü—Ä–æ–ª–∏–≤–Ω–æ–π –¥–æ–∂–¥—å",

    // –°–Ω–µ–≥
    "Patchy snow possible": "–í–æ–∑–º–æ–∂–µ–Ω –Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥",
    "Patchy light snow": "–ú–µ—Å—Ç–∞–º–∏ –ª–µ–≥–∫–∏–π —Å–Ω–µ–≥",
    "Light snow": "–õ–µ–≥–∫–∏–π —Å–Ω–µ–≥",
    "Patchy moderate snow": "–ú–µ—Å—Ç–∞–º–∏ —É–º–µ—Ä–µ–Ω–Ω—ã–π —Å–Ω–µ–≥",
    "Moderate snow": "–£–º–µ—Ä–µ–Ω–Ω—ã–π —Å–Ω–µ–≥",
    "Patchy heavy snow": "–ú–µ—Å—Ç–∞–º–∏ —Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥",
    "Heavy snow": "–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥",
    Blizzard: "–ú–µ—Ç–µ–ª—å",
    "Blowing snow": "–ü–æ–∑–µ–º–∫–∞",

    // –°–º–µ—à–∞–Ω–Ω—ã–µ –æ—Å–∞–¥–∫–∏
    "Patchy sleet possible": "–í–æ–∑–º–æ–∂–µ–Ω –º–æ–∫—Ä—ã–π —Å–Ω–µ–≥",
    "Light sleet": "–õ–µ–≥–∫–∏–π –º–æ–∫—Ä—ã–π —Å–Ω–µ–≥",
    "Moderate or heavy sleet": "–£–º–µ—Ä–µ–Ω–Ω—ã–π –∏–ª–∏ —Å–∏–ª—å–Ω—ã–π –º–æ–∫—Ä—ã–π —Å–Ω–µ–≥",
    "Light sleet showers": "–õ–µ–≥–∫–∏–π –º–æ–∫—Ä—ã–π —Å–Ω–µ–≥",
    "Moderate or heavy sleet showers": "–£–º–µ—Ä–µ–Ω–Ω—ã–π –∏–ª–∏ —Å–∏–ª—å–Ω—ã–π –º–æ–∫—Ä—ã–π —Å–Ω–µ–≥",

    // –õ–µ–¥
    "Light freezing rain": "–õ–µ–≥–∫–∏–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å",
    "Moderate or heavy freezing rain": "–£–º–µ—Ä–µ–Ω–Ω—ã–π –∏–ª–∏ —Å–∏–ª—å–Ω—ã–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å",
    "Light freezing drizzle": "–õ–µ–≥–∫–∞—è –ª–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å",
    "Heavy freezing drizzle": "–°–∏–ª—å–Ω–∞—è –ª–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å",
    "Light showers of ice pellets": "–õ–µ–≥–∫–∏–π –≥—Ä–∞–¥",
    "Moderate or heavy showers of ice pellets": "–£–º–µ—Ä–µ–Ω–Ω—ã–π –∏–ª–∏ —Å–∏–ª—å–Ω—ã–π –≥—Ä–∞–¥",

    // –¢—É–º–∞–Ω
    Mist: "–¢—É–º–∞–Ω",
    Fog: "–¢—É–º–∞–Ω",
    "Freezing fog": "–õ–µ–¥—è–Ω–æ–π —Ç—É–º–∞–Ω",

    // –ì—Ä–æ–∑–∞
    "Thundery outbreaks possible": "–í–æ–∑–º–æ–∂–Ω—ã –≥—Ä–æ–∑—ã",
    "Patchy light rain with thunder": "–ú–µ—Å—Ç–∞–º–∏ –ª–µ–≥–∫–∏–π –¥–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π",
    "Moderate or heavy rain with thunder":
      "–£–º–µ—Ä–µ–Ω–Ω—ã–π –∏–ª–∏ —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π",
    "Patchy light snow with thunder": "–ú–µ—Å—Ç–∞–º–∏ –ª–µ–≥–∫–∏–π —Å–Ω–µ–≥ —Å –≥—Ä–æ–∑–æ–π",
    "Moderate or heavy snow with thunder":
      "–£–º–µ—Ä–µ–Ω–Ω—ã–π –∏–ª–∏ —Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥ —Å –≥—Ä–æ–∑–æ–π",

    // –û–±—â–∏–µ
    Unknown: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
  };

  return translations[text] || text;
};

const getWeatherTypeByCode = (code: number): string => {
  if (code >= 1000 && code <= 1003) return "‚òÄÔ∏è";
  if (code >= 1006 && code <= 1009) return "‚òÅÔ∏è";
  if (code === 1030) return "üå´Ô∏è";
  if (code >= 1063 && code <= 1087) return "üåßÔ∏è";
  if (code >= 1114 && code <= 1117) return "‚ùÑÔ∏è";
  if (code >= 1135 && code <= 1147) return "üå´Ô∏è";
  if (code >= 1150 && code <= 1282) return "üåßÔ∏è";
  return "‚òÅÔ∏è";
};

export async function getCurrentWeather(
  city: string
): Promise<ProcessedWeatherData> {
  try {
    const response = await fetch(
      `${BASE_URL}/current.json?key=${API_KEY}&q=${encodeURIComponent(
        city
      )}&aqi=no`
    );

    if (!response.ok) {
      handleApiError(response.status);
    }

    const data: WeatherData = await response.json();

    return {
      city: data.location.name,
      temperature: Math.round(data.current.temp_c),
      feelsLike: Math.round(data.current.feelslike_c),
      condition: translateWeatherCondition(data.current.condition.text),
      humidity: data.current.humidity,
      windSpeed: Math.round(data.current.wind_kph),
      windDegree: data.current.wind_degree,
      windDir: data.current.wind_dir,
      pressure: data.current.pressure_mb,
      icon: getWeatherTypeByCode(data.current.condition.code),
      uv: data.current.uv,
      isDay: data.current.is_day === 1,
      visibility: data.current.vis_km,
      gustSpeed: Math.round(data.current.gust_kph),
      precipitation: data.current.precip_mm,
      cloudCover: data.current.cloud,
    };
  } catch (error) {
    console.error("Error fetching weather data:", error);
    throw error;
  }
}

export async function getWeatherForecast(
  city: string,
  days: number = 5
): Promise<ProcessedForecastData[]> {
  try {
    const response = await fetch(
      `${BASE_URL}/forecast.json?key=${API_KEY}&q=${encodeURIComponent(
        city
      )}&days=${days}&aqi=no&alerts=no`
    );

    if (!response.ok) {
      handleApiError(response.status);
    }

    const data: WeatherData = await response.json();

    if (!data.forecast) {
      throw new Error("No forecast data available");
    }

    return data.forecast.forecastday.map((day, index) => {
      const date = new Date(day.date);
      const dayNames = [
        "–°–µ–≥–æ–¥–Ω—è",
        "–ó–∞–≤—Ç—Ä–∞",
        "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞",
        "–ß–µ—Ç–≤–µ—Ä–≥",
        "–ü—è—Ç–Ω–∏—Ü–∞",
        "–°—É–±–±–æ—Ç–∞",
        "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
      ];
      const dayName =
        index < 3
          ? dayNames[index]
          : date.toLocaleDateString("ru-RU", { weekday: "long" });

      const formattedDate = date.toLocaleDateString("ru-RU", {
        day: "numeric",
        month: "long",
      });

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—á–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      const hourly = day.hour.map((hour) => ({
        time: hour.time,
        temp: Math.round(hour.temp_c),
        condition: translateWeatherCondition(hour.condition.text),
        icon: getWeatherTypeByCode(hour.condition.code),
        windSpeed: Math.round(hour.wind_kph),
        windDir: hour.wind_dir,
        humidity: hour.humidity,
        willItRain: hour.will_it_rain === 1,
        chanceOfRain: hour.chance_of_rain,
        visibility: hour.vis_km,
        uv: hour.uv,
        isDay: hour.is_day === 1,
      }));

      return {
        day: dayName,
        date: day.date,
        dateFormatted: formattedDate,
        temp: Math.round(day.day.avgtemp_c),
        icon: getWeatherTypeByCode(day.day.condition.code),
        condition: translateWeatherCondition(day.day.condition.text),
        maxTemp: Math.round(day.day.maxtemp_c),
        minTemp: Math.round(day.day.mintemp_c),
        maxWind: Math.round(day.day.maxwind_kph),
        totalPrecip: day.day.totalprecip_mm,
        avgHumidity: day.day.avghumidity,
        willItRain: day.day.daily_will_it_rain === 1,
        chanceOfRain: day.day.daily_chance_of_rain,
        uv: day.day.uv,
        astro: {
          sunrise: day.astro.sunrise,
          sunset: day.astro.sunset,
          moonrise: day.astro.moonrise,
          moonset: day.astro.moonset,
          moonPhase: day.astro.moon_phase,
          moonIllumination: day.astro.moon_illumination,
        },
        hourly,
      };
    });
  } catch (error) {
    console.error("Error fetching forecast data:", error);
    throw error;
  }
}

export async function getWeatherByCoords(
  lat: number,
  lon: number
): Promise<ProcessedWeatherData> {
  try {
    const response = await fetch(
      `${BASE_URL}/current.json?key=${API_KEY}&q=${lat},${lon}&aqi=no`
    );

    if (!response.ok) {
      handleApiError(response.status);
    }

    const data: WeatherData = await response.json();

    return {
      city: data.location.name,
      temperature: Math.round(data.current.temp_c),
      feelsLike: Math.round(data.current.feelslike_c),
      condition: translateWeatherCondition(data.current.condition.text),
      humidity: data.current.humidity,
      windSpeed: Math.round(data.current.wind_kph),
      windDegree: data.current.wind_degree,
      windDir: data.current.wind_dir,
      pressure: data.current.pressure_mb,
      icon: getWeatherTypeByCode(data.current.condition.code),
      uv: data.current.uv,
      isDay: data.current.is_day === 1,
      visibility: data.current.vis_km,
      gustSpeed: Math.round(data.current.gust_kph),
      precipitation: data.current.precip_mm,
      cloudCover: data.current.cloud,
      lat: data.location.lat,
      lon: data.location.lon,
    };
  } catch (error) {
    console.error("Error fetching weather data by coordinates:", error);
    throw error;
  }
}

export async function getWeatherForecastByCoords(
  lat: number,
  lon: number,
  days: number = 5
): Promise<ProcessedForecastData[]> {
  try {
    const response = await fetch(
      `${BASE_URL}/forecast.json?key=${API_KEY}&q=${lat},${lon}&days=${days}&aqi=no&alerts=no`
    );

    if (!response.ok) {
      handleApiError(response.status);
    }

    const data: WeatherData = await response.json();

    if (!data.forecast) {
      throw new Error("No forecast data available");
    }

    return data.forecast.forecastday.map((day, index) => {
      const date = new Date(day.date);
      const dayNames = [
        "–°–µ–≥–æ–¥–Ω—è",
        "–ó–∞–≤—Ç—Ä–∞",
        "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞",
        "–ß–µ—Ç–≤–µ—Ä–≥",
        "–ü—è—Ç–Ω–∏—Ü–∞",
        "–°—É–±–±–æ—Ç–∞",
        "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
      ];
      const dayName =
        index < 3
          ? dayNames[index]
          : date.toLocaleDateString("ru-RU", { weekday: "long" });

      const formattedDate = date.toLocaleDateString("ru-RU", {
        day: "numeric",
        month: "long",
      });

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—á–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      const hourly = day.hour.map((hour) => ({
        time: hour.time,
        temp: Math.round(hour.temp_c),
        condition: translateWeatherCondition(hour.condition.text),
        icon: getWeatherTypeByCode(hour.condition.code),
        windSpeed: Math.round(hour.wind_kph),
        windDir: hour.wind_dir,
        humidity: hour.humidity,
        willItRain: hour.will_it_rain === 1,
        chanceOfRain: hour.chance_of_rain,
        visibility: hour.vis_km,
        uv: hour.uv,
        isDay: hour.is_day === 1,
      }));

      return {
        day: dayName,
        date: day.date,
        dateFormatted: formattedDate,
        temp: Math.round(day.day.avgtemp_c),
        icon: getWeatherTypeByCode(day.day.condition.code),
        condition: translateWeatherCondition(day.day.condition.text),
        maxTemp: Math.round(day.day.maxtemp_c),
        minTemp: Math.round(day.day.mintemp_c),
        maxWind: Math.round(day.day.maxwind_kph),
        totalPrecip: day.day.totalprecip_mm,
        avgHumidity: day.day.avghumidity,
        willItRain: day.day.daily_will_it_rain === 1,
        chanceOfRain: day.day.daily_chance_of_rain,
        uv: day.day.uv,
        astro: {
          sunrise: day.astro.sunrise,
          sunset: day.astro.sunset,
          moonrise: day.astro.moonrise,
          moonset: day.astro.moonset,
          moonPhase: day.astro.moon_phase,
          moonIllumination: day.astro.moon_illumination,
        },
        hourly,
      };
    });
  } catch (error) {
    console.error("Error fetching forecast data by coordinates:", error);
    throw error;
  }
}

export async function getFullWeatherData(
  city: string,
  days: number = 3
): Promise<any> {
  try {
    const response = await fetch(
      `${BASE_URL}/forecast.json?key=${API_KEY}&q=${encodeURIComponent(
        city
      )}&days=${days}&aqi=no&alerts=no`
    );

    if (!response.ok) {
      handleApiError(response.status);
    }

    const data = await response.json();
    return data;
  } catch (error) {
    console.error("Error fetching full weather data:", error);
    throw error;
  }
}
