---
export interface Props {
  title?: string;
  description?: string;
}

const {
  title = "WeatherFlow - Погода в стиле",
  description = "Иммерсивное погодное приложение с анимацией дождя и неоморфизмом. Прогноз погоды в реальном времени с красивыми визуальными эффектами.",
} = Astro.props;

// Определяем базовый путь в зависимости от окружения
const basePath = "/weather";
---

<!doctype html>
<html lang="ru">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href={`${basePath}/favicon.svg`} />
    <link rel="manifest" href={`${basePath}/manifest.json`} />
    <meta name="theme-color" content="#4f46e5" />
    <meta name="generator" content={Astro.generator} />

    <!-- SEO Meta Tags -->
    <meta
      name="keywords"
      content="погода, прогноз погоды, погодное приложение, анимация дождя, неоморфизм, WeatherFlow"
    />
    <meta name="author" content="WeatherFlow" />
    <meta name="robots" content="index, follow" />

    <!-- Open Graph -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content="https://alastromoody.github.io/weather" />
    <meta
      property="og:image"
      content="https://alastromoody.github.io/weather/favicon.svg"
    />

    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta
      name="twitter:image"
      content="https://alastromoody.github.io/weather/favicon.svg"
    />

    <title>{title}</title>
    <style is:global>
      :root {
        --bg-primary: #0f0f23;
        --bg-secondary: #1a1a2e;
        --bg-tertiary: #16213e;
        --text-primary: #ffffff;
        --text-secondary: #b8b8b8;
        --accent-primary: #4f46e5;
        --accent-secondary: #7c3aed;
        --shadow-light: 8px 8px 16px rgba(0, 0, 0, 0.3);
        --shadow-dark: -8px -8px 16px rgba(255, 255, 255, 0.05);
        --neumorphism: var(--shadow-light), var(--shadow-dark);
        --neumorphism-inset: inset 4px 4px 8px rgba(0, 0, 0, 0.3),
          inset -4px -4px 8px rgba(255, 255, 255, 0.05);
      }

      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      /* Предотвращение белого фона при скролле на мобильных */
      @media screen and (max-width: 768px) {
        body {
          background: var(--bg-primary) !important;
        }

        html {
          background: var(--bg-primary) !important;
        }

        .container {
          background: var(--bg-primary) !important;
        }
      }

      body {
        font-family:
          "Inter",
          -apple-system,
          BlinkMacSystemFont,
          "Segoe UI",
          Roboto,
          sans-serif;
        background: var(--bg-primary);
        color: var(--text-primary);
        min-height: 100vh;
        line-height: 1.6;
        overflow-x: hidden;
      }

      html {
        background: var(--bg-primary);
        overflow-x: hidden;
      }

      .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
        background: var(--bg-primary);
        min-height: 100vh;
      }

      /* Мобильная оптимизация */
      @media screen and (max-width: 768px) {
        .container {
          padding: 0 10px;
          max-width: 100%;
        }

        body {
          font-size: 14px;
        }

        h1 {
          font-size: 1.5rem !important;
        }

        h2 {
          font-size: 1.2rem !important;
          margin-bottom: 0.5rem !important;
        }

        .weather-app {
          padding: 10px 0 !important;
        }

        .app-header {
          margin-bottom: 10px !important;
        }

        .weather-card {
          margin-bottom: 15px !important;
          padding: 15px !important;
        }

        .forecast-grid {
          gap: 10px !important;
        }

        .forecast-card {
          padding: 12px !important;
        }
      }

      /* Neumorphism эффекты */
      .neumorphism {
        background: var(--bg-secondary);
        border-radius: 20px;
        box-shadow: var(--neumorphism);
        border: 1px solid rgba(255, 255, 255, 0.1);
      }

      .neumorphism-inset {
        background: var(--bg-secondary);
        border-radius: 20px;
        box-shadow:
          inset var(--shadow-light),
          inset var(--shadow-dark);
        border: 1px solid rgba(255, 255, 255, 0.1);
      }

      /* Микроанимации */
      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: translateY(20px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      @keyframes slideIn {
        from {
          transform: translateX(-20px);
          opacity: 0;
        }
        to {
          transform: translateX(0);
          opacity: 1;
        }
      }

      @keyframes pulse {
        0%,
        100% {
          transform: scale(1);
        }
        50% {
          transform: scale(1.05);
        }
      }

      .animate-fade-in {
        animation: fadeIn 0.6s ease-out;
      }

      .animate-slide-in {
        animation: slideIn 0.4s ease-out;
      }

      .animate-pulse {
        animation: pulse 2s infinite;
      }

      /* Плавные переходы */
      * {
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      }

      /* Скроллбар */
      ::-webkit-scrollbar {
        width: 8px;
      }

      ::-webkit-scrollbar-track {
        background: var(--bg-primary);
      }

      ::-webkit-scrollbar-thumb {
        background: var(--accent-primary);
        border-radius: 4px;
      }

      ::-webkit-scrollbar-thumb:hover {
        background: var(--accent-secondary);
      }
    </style>
  </head>
  <body>
    <main class="container">
      <slot />
    </main>

    <script define:vars={{ basePath }}>
      // Регистрация Service Worker
      if ("serviceWorker" in navigator) {
        window.addEventListener("load", () => {
          navigator.serviceWorker
            .register("/weather/sw.js")
            .then((registration) => {
              // Service Worker успешно зарегистрирован
            })
            .catch((registrationError) => {
              // Ошибка регистрации Service Worker
            });
        });
      }
    </script>
  </body>
</html>
